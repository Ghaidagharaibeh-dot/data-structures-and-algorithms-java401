/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test public void addVertex(){

        Graph graph = new Graph();

        graph.addVertex("Ghaida");
        graph.addVertex("Gharaibeh");

        assertNotNull(graph.getVertices());
        assertEquals(2,graph.size());
    }

    @Test public void addEdge(){

        Graph graph = new Graph();

        graph.addVertex("Ghaida");
        graph.addVertex("Rahmeh");
        graph.addEdge("Ghaida", "Rahmeh");

        assertEquals("Vertex{label='Rahmeh'}[Vertex{label='Ghaida'}]Vertex{label='Ghaida'}[Vertex{label='Rahmeh'}]", graph.printGraph());
    }

    @Test public void vertexNeighbors(){

        Graph graph = new Graph();

        graph.addVertex("Ghaida");
        graph.addVertex("Rhmeh");
        graph.addVertex("Moh");
        graph.addVertex("Saif");
        graph.addEdge("Ghaida", "Moh");
        graph.addEdge("Ghaida", "Rahmeh");
        graph.addEdge("Saif", "Rahmeh");

        assertEquals("[Vertex{label='Alaa'}, Vertex{label='Mariam'}]",graph.getNeighbors("Doaa").toString());
        assertEquals("[Vertex{label='Mariam'}]", graph.getNeighbors("Amara").toString());

    }

    @Test
    public void breadthFirst(){

        Graph graph1 = new Graph();

        graph1.addVertex("Pandora");
        graph1.addVertex("Arendelle");
        graph1.addVertex("Metroville");
        graph1.addVertex("Monstroplolis");
        graph1.addVertex("Narnia");
        graph1.addVertex("Naboo");

        graph1.addEdge("Pandora", "Arendelle");
        graph1.addEdge("Arendelle", "Metroville");
        graph1.addEdge("Arendelle", "Monstroplolis");
        graph1.addEdge("Metroville", "Narnia");
        graph1.addEdge("Metroville", "Naboo");
        graph1.addEdge("Metroville", "Monstroplolis");
        graph1.addEdge("Monstroplolis", "Naboo");
        graph1.addEdge("Narnia", "Naboo");

        assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]", graph1.breadthTraverse("Pandora").toString());
    }


    @Test
    public void depthFirstTest(){

        Graph graph3 = new Graph();

        graph3.addVertex("A");
        graph3.addVertex("B");
        graph3.addVertex("C");
        graph3.addVertex("D");
        graph3.addVertex("E");
        graph3.addVertex("F");
        graph3.addVertex("G");
        graph3.addVertex("H");

        graph3.addEdge("A", "D");
        graph3.addEdge("A", "B");
        graph3.addEdge("B", "D");
        graph3.addEdge("B", "C");
        graph3.addEdge("C", "G");
        graph3.addEdge("D", "F");
        graph3.addEdge("D", "H");
        graph3.addEdge("D", "E");
        graph3.addEdge("F", "H");

        assertEquals("[A, B, C, G, D, E, H, F]", graph3.depthFirstTraverse("A").toString());
    }

    @Test
    public void depthFirstOneVertex(){

        Graph graph3 = new Graph();

        graph3.addVertex("A");

        assertEquals("[A]", graph3.depthFirstTraverse("A").toString());
    }

    @Test
    public void depthFirstTest2(){

        Graph graph3 = new Graph();

        graph3.addVertex("A");
        graph3.addVertex("B");
        graph3.addVertex("C");

        graph3.addEdge("A", "B");

        assertEquals("[A, B]", graph3.depthFirstTraverse("A").toString());
    }

}

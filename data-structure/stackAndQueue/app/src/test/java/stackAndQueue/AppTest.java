/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackAndQueue;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {


    // Test code challenge 12
    @Test void AnimalNullTest(){
        AnimalShelter testing = new AnimalShelter();
        testing.enqueue(new Cat("Cati"));
        testing.enqueue(new Dog("lio"));
        testing.dequeue("cats");
        testing.dequeue("dogs");
        assertTrue(testing.cats.ifEmpty());

    }

    @Test void AnimalShelterTest(){
        AnimalShelter testing = new AnimalShelter();
        testing.enqueue(new Cat("cati"));
        testing.enqueue(new Cat("Jess"));
        testing.enqueue(new Dog("Bob"));
        testing.enqueue(new Dog("Lio"));
        String expected = "AnimalShelter{cat={caty} -> {Jess} -> {Null}, dog={Bob} -> {Lio} -> {Null}}";

        assertEquals(expected,testing.toString());
    }

    @Test
    public void enqueuePseudo(){
        PseudoQueue testing = new PseudoQueue();
        testing.enqueue("G");
        testing.enqueue("H");
        testing.enqueue("I");
        testing.enqueue("D");
        testing.enqueue("A");

        assertEquals("", testing.toString());

    }

    @Test
    public void dequeuePseudo() {
        PseudoQueue testing = new PseudoQueue();

        testing.enqueue("G");
        testing.enqueue("H");
        testing.enqueue("I");
        testing.enqueue("D");
        testing.enqueue("A");
        assertEquals("G", testing.dequeue());
        testing.dequeue();
        testing.dequeue();
        assertEquals("D", testing.dequeue());


    }

    // test codeChallenge 10
  @Test
  public void testPush(){

      Stack testing=new Stack();
      testing.push("Ghaida");
      testing.push("Gharaibeh");
      assertEquals("Gharaibeh",testing.peek());
      assertFalse(testing.isEmpty());

  }
      @Test void multiPush() {
          Stack testing=new Stack();

          testing.push("magic");
          testing.push("not");
          testing.push("Logic");

          String expected = "{Logic} -> {not} -> {magic} -> {Null}";
          assertEquals(expected, testing.toString());

      }
@Test
  public void testPop (){
      Stack testing=new Stack();
      testing.push("1");
      testing.push("2");
      testing.push("3");

      assertEquals("3", testing.pop());
      assertEquals("2", testing.peek());
  }
  @Test
    public void multiplePop (){
        Stack testing=new Stack();
        testing.push("1");
        testing.push("2");
        testing.push("3");
        testing.push("4");
        testing.push("5");
        testing.push("6");
        testing.push("7");
        testing.push("8");
        testing.pop();
        testing.pop();
        testing.pop();
        testing.pop();
        testing.pop();

        assertEquals("3", testing.peek());
    }

      @Test void peekTest() {
    Stack testing = new Stack();
    testing.push("1");
    testing.push("2");
    testing.push("3");
    String expected = "3";
    assertEquals(expected, testing.peek());
  }

    @Test void emptyTest() {
        Stack testing = new Stack();
        boolean expected = true;
        assertEquals(expected, testing.isEmpty());
    }
    @Test void popEmptyTest() {
        Stack testing = new Stack();
        String expected = "The Stack Is Empty";
        assertEquals(expected, testing.pop());
        assertEquals(expected, testing.peek());
    }

    @Test void testEnqueue() {
        Queue testing = new Queue();
        testing.enqueue("1");
        testing.enqueue("2");
        testing.enqueue("3");
        String expected = "{1} -> {2} -> {3} -> {Null}";
        assertEquals(expected, testing.toString());
    }
    @Test void multiEnqueue() {
        Queue testing = new Queue();
        testing.enqueue("1");
        testing.enqueue("2");
        testing.enqueue("3");
        testing.enqueue("4");
        testing.enqueue("5");
        testing.enqueue("6");
        testing.enqueue("7");
        testing.enqueue("8");
        testing.enqueue("9");
        testing.enqueue("10");


        String expected = "{1} -> {2} -> {3} -> {4} -> {5} -> {6} -> {7} -> {8} -> {9} -> {10} -> {Null}";
        assertEquals(expected, testing.toString());
    }
    @Test void testDequeue() {
        Queue testing = new Queue();
        testing.enqueue("1");
        testing.enqueue("2");
        testing.enqueue("3");
        String expected = "1";
        assertEquals(expected, testing.dequeue());
    }
    @Test void peekQueue() {
        Queue testing = new Queue();
        testing.enqueue("1");
        testing.enqueue("2");
        testing.enqueue("3");
        testing.enqueue("4");
        testing.enqueue("5");
        assertEquals("1", testing.peek());
    }

    @Test void emptyQueue() {
        Queue testing = new Queue();
        testing.enqueue("ghaida");
        testing.enqueue("gh");
        testing.dequeue();
        testing.dequeue();
        assertEquals("The List is empty", testing.toString());
    }

    @Test void instemptyQueue() {
        Queue testing = new Queue();
        assertEquals(true, testing.isEmpty());
    }

    @Test void peekEmptyQueue() {
        Queue testing = new Queue();
        assertEquals(" ", testing.peek());
    }



}

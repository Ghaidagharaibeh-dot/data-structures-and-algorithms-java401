/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stackAndQueue2;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

        // test codeChallenge 10
        @Test
        public void testPush(){

            Stack testing=new Stack();
            testing.push("Ghaida");
            testing.push("Gharaibeh");
            assertEquals("Gharaibeh",testing.peek());
            assertFalse(testing.isEmpty());

        }
        @Test void multiPush() {
            Stack testing=new Stack();

            testing.push("magic");
            testing.push("not");
            testing.push("Logic");

            String expected = "{Logic} -> {not} -> {magic} -> {Null}";
            assertEquals(expected, testing.toString());

        }
        @Test
        public void testPop (){
            Stack testing=new Stack();
            testing.push("1");
            testing.push("2");
            testing.push("3");

            assertEquals("3", testing.pop());
            assertEquals("2", testing.peek());
        }
        @Test
        public void multiplePop (){
            Stack testing=new Stack();
            testing.push("1");
            testing.push("2");
            testing.push("3");
            testing.push("4");
            testing.push("5");
            testing.push("6");
            testing.push("7");
            testing.push("8");
            testing.pop();
            testing.pop();
            testing.pop();
            testing.pop();
            testing.pop();

            assertEquals("3", testing.peek());
        }

        @Test void peekTest() {
            Stack testing = new Stack();
            testing.push("1");
            testing.push("2");
            testing.push("3");
            String expected = "3";
            assertEquals(expected, testing.peek());
        }

        @Test void emptyTest() {
            Stack testing = new Stack();
            boolean expected = true;
            assertEquals(expected, testing.isEmpty());
        }
        @Test void popEmptyTest() {
            Stack testing = new Stack();
            String expected = "The Stack Is Empty";
            assertEquals(expected, testing.pop());
            assertEquals(expected, testing.peek());
        }

        //code challenge 11

    @Test
    public void enqueuePseudo(){
        PseudoQueue testing = new PseudoQueue();
        testing.enqueue("G");
        testing.enqueue("H");
        testing.enqueue("I");
        testing.enqueue("D");
        testing.enqueue("A");

        assertEquals("PseudoQueue{stack2={G} -> {H} -> {I} -> {D} -> {A} -> {Null}}", testing.toString());

    }

    @Test
    public void dequeuePseudo() {
        PseudoQueue testing = new PseudoQueue();

        testing.enqueue("G");
        testing.enqueue("H");
        testing.enqueue("I");
        testing.enqueue("D");
        testing.enqueue("A");
        assertEquals("G", testing.dequeue());
        testing.dequeue();
        testing.dequeue();
        assertEquals("D", testing.dequeue());


    }

    // code challenge 12
    @Test void AnimalNullTest(){
        AnimalShelter testing = new AnimalShelter();
        testing.enqueue(new Cat("Cati"));
        testing.enqueue(new Dog("lio"));
        testing.dequeue("cats");
        testing.dequeue("dogs");
        assertFalse(testing.cats.isEmpty());

    }

    @Test void AnimalShelterTest(){
        AnimalShelter testing = new AnimalShelter();
        testing.enqueue(new Cat("cati"));
        testing.enqueue(new Cat("Jess"));
        testing.enqueue(new Dog("Bob"));
        testing.enqueue(new Dog("Lio"));
        String expected = "AnimalShelter{cat={cati} -> {Jess} -> {Null}, dog={Bob} -> {Lio} -> {Null}}";

        assertEquals(expected,testing.toString());
    }
}
